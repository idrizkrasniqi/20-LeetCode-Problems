class Solution {
#include <iostream>
#include <vector>


public:
    std::vector<int> getConcatenation(const std::vector<int>& nums) {
    int n = nums.size();
    std::vector<int> ans(2 * n);

    // Copy elements at the same position
    for (int i = 0; i < n; ++i) {
        ans[i] = nums[i];
    }

    // Copy elements again starting from position n
    for (int i = 0; i < n; ++i) {
        ans[n + i] = nums[i];
    }

    return ans;
}

int main() {
    // Example usage
    std::vector<int> nums = {1, 2, 3, 4};
    std::vector<int> ans = getConcatenation(nums);

    // Display the concatenated array
    std::cout << "Concatenated array: ";
    for (int i = 0; i < ans.size(); ++i) {
        std::cout << ans[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}
};
class Solution {
#include <iostream>
#include <vector>
public:
    std::vector<int> buildArray(std::vector<int>& nums) {
    std::vector<int> ans(nums.size());
    for (int i = 0; i < nums.size(); i++) {
        ans[i] = nums[nums[i]];
    }
    return ans;
}

int main() {
    std::vector<int> nums = {0, 2, 1, 5, 3, 4};
    std::vector<int> ans = buildArray(nums);
    for (int num : ans) {
        std::cout << num << " ";
    }
    return 0;
}
};
class Solution {
#include <iostream>
#include <vector>
#include <unordered_map>
public:
    int numIdenticalPairs(const std::vector<int>& nums) {
    std::unordered_map<int, int> frequency;
    int count = 0;

    for (int num : nums) {
        // Increment count for the current number and add it to the total count
        count += frequency[num]++;
    }

    return count;
}

int main() {
    // Example usage
    std::vector<int> nums = {1, 2, 3, 1, 1, 3, 4};
    int result = numIdenticalPairs(nums);

    std::cout << "Number of good pairs: " << result << std::endl;

    return 0;
}
};
class Solution {
#include <iostream>
#include <vector>
#include <string>
public:
    int finalValueAfterOperations(const std::vector<std::string>& operations) {
    int x = 0;  // Initial value of X

    for (const std::string& operation : operations) {
        if (operation == "++X" || operation == "X++") {
            x += 1;
        } else if (operation == "--X" || operation == "X--") {
            x -= 1;
        }
    }

    return x;
}

int main() {
    // Example usage:
    std::vector<std::string> operations = {"++X", "--X", "X++"};
    int result = finalValueAfterOperations(operations);
    
    // Print the final value of X
    std::cout << "Final value of X: " << result << std::endl;

    return 0;
}
};
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
    std::vector<int> result;

    // Iterate through both halves simultaneously
    for (int i = 0; i < n; ++i) {
        // Add elements from the first half
        result.push_back(nums[i]);
        // Add elements from the second half
        result.push_back(nums[n + i]);
    }

    return result;
}

int main() {
    // Example usage:
    std::vector<int> nums = {1, 2, 3, 4, 5, 6};
    int n = nums.size() / 2;
    
    std::vector<int> result = shuffle(nums, n);

    // Print the shuffled array
    std::cout << "Shuffled array: ";
    for (int num : result) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
    };

